// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: task.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (title, description, status, parent_list_id) VALUES ($1, $2, $3, $4) RETURNING id, title, description, status, parent_list_id, parent_task_id, created_at
`

type CreateTaskParams struct {
	Title        string      `json:"title"`
	Description  pgtype.Text `json:"description"`
	Status       Status      `json:"status"`
	ParentListID pgtype.Int8 `json:"parent_list_id"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.ParentListID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.ParentListID,
		&i.ParentTaskID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const getAllTasks = `-- name: GetAllTasks :many
SELECT id, title, description, status, parent_list_id, parent_task_id, created_at FROM tasks
`

func (q *Queries) GetAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, getAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.ParentListID,
			&i.ParentTaskID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, title, description, status, parent_list_id, parent_task_id, created_at FROM tasks WHERE id = $1
`

func (q *Queries) GetTaskByID(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.ParentListID,
		&i.ParentTaskID,
		&i.CreatedAt,
	)
	return i, err
}

const getTaskByParentListID = `-- name: GetTaskByParentListID :many
SELECT id, title, description, status, parent_list_id, parent_task_id, created_at FROM tasks WHERE parent_list_id = $1
`

func (q *Queries) GetTaskByParentListID(ctx context.Context, parentListID pgtype.Int8) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTaskByParentListID, parentListID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.ParentListID,
			&i.ParentTaskID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskByParentTaskID = `-- name: GetTaskByParentTaskID :many
SELECT id, title, description, status, parent_list_id, parent_task_id, created_at FROM tasks WHERE parent_task_id = $1
`

func (q *Queries) GetTaskByParentTaskID(ctx context.Context, parentTaskID pgtype.Int8) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTaskByParentTaskID, parentTaskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.ParentListID,
			&i.ParentTaskID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
