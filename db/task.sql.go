// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: task.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
        title,
        description,
        is_done,
        due_date,
        priority,
        parent_list_id,
        parent_task_id
    )
VALUES (
        $1,
        $2,
        COALESCE($3, false),
        $4,
        COALESCE($5, 0),
        $6,
        $7
    )
RETURNING id, title, description, is_done, due_date, priority, parent_list_id, parent_task_id, created_at
`

type CreateTaskParams struct {
	Title        string           `json:"title"`
	Description  pgtype.Text      `json:"description"`
	IsDone       interface{}      `json:"is_done"`
	DueDate      pgtype.Timestamp `json:"due_date"`
	Priority     interface{}      `json:"priority"`
	ParentListID pgtype.Int8      `json:"parent_list_id"`
	ParentTaskID pgtype.Int8      `json:"parent_task_id"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.IsDone,
		arg.DueDate,
		arg.Priority,
		arg.ParentListID,
		arg.ParentTaskID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsDone,
		&i.DueDate,
		&i.Priority,
		&i.ParentListID,
		&i.ParentTaskID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :execrows
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.Exec(ctx, deleteTask, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAllTasks = `-- name: GetAllTasks :many
SELECT id, title, description, is_done, due_date, priority, parent_list_id, parent_task_id, created_at
FROM tasks
`

func (q *Queries) GetAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, getAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.IsDone,
			&i.DueDate,
			&i.Priority,
			&i.ParentListID,
			&i.ParentTaskID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getParentTaskData = `-- name: GetParentTaskData :one
SELECT id,
    parent_task_id
FROM tasks
WHERE id = $1
`

type GetParentTaskDataRow struct {
	ID           int64       `json:"id"`
	ParentTaskID pgtype.Int8 `json:"parent_task_id"`
}

func (q *Queries) GetParentTaskData(ctx context.Context, id int64) (GetParentTaskDataRow, error) {
	row := q.db.QueryRow(ctx, getParentTaskData, id)
	var i GetParentTaskDataRow
	err := row.Scan(&i.ID, &i.ParentTaskID)
	return i, err
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, title, description, is_done, due_date, priority, parent_list_id, parent_task_id, created_at
FROM tasks
WHERE id = $1
`

func (q *Queries) GetTaskByID(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsDone,
		&i.DueDate,
		&i.Priority,
		&i.ParentListID,
		&i.ParentTaskID,
		&i.CreatedAt,
	)
	return i, err
}

const getTasksByParentListID = `-- name: GetTasksByParentListID :many
SELECT id, title, description, is_done, due_date, priority, parent_list_id, parent_task_id, created_at
FROM tasks
WHERE parent_list_id = $1
`

func (q *Queries) GetTasksByParentListID(ctx context.Context, id pgtype.Int8) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasksByParentListID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.IsDone,
			&i.DueDate,
			&i.Priority,
			&i.ParentListID,
			&i.ParentTaskID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksByParentTaskID = `-- name: GetTasksByParentTaskID :many
SELECT id, title, description, is_done, due_date, priority, parent_list_id, parent_task_id, created_at
FROM tasks
WHERE parent_task_id = $1
`

func (q *Queries) GetTasksByParentTaskID(ctx context.Context, id pgtype.Int8) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasksByParentTaskID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.IsDone,
			&i.DueDate,
			&i.Priority,
			&i.ParentListID,
			&i.ParentTaskID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET title = COALESCE($1, title),
    description = $2,
    is_done = COALESCE($3, is_done),
    due_date = $4,
    priority = COALESCE($5, priority),
    parent_list_id = $6,
    parent_task_id = $7
WHERE id = $8
RETURNING id, title, description, is_done, due_date, priority, parent_list_id, parent_task_id, created_at
`

type UpdateTaskParams struct {
	Title        pgtype.Text      `json:"title"`
	Description  pgtype.Text      `json:"description"`
	IsDone       pgtype.Bool      `json:"is_done"`
	DueDate      pgtype.Timestamp `json:"due_date"`
	Priority     pgtype.Int4      `json:"priority"`
	ParentListID pgtype.Int8      `json:"parent_list_id"`
	ParentTaskID pgtype.Int8      `json:"parent_task_id"`
	ID           int64            `json:"id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTask,
		arg.Title,
		arg.Description,
		arg.IsDone,
		arg.DueDate,
		arg.Priority,
		arg.ParentListID,
		arg.ParentTaskID,
		arg.ID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsDone,
		&i.DueDate,
		&i.Priority,
		&i.ParentListID,
		&i.ParentTaskID,
		&i.CreatedAt,
	)
	return i, err
}
