// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Status string

const (
	StatusTodo       Status = "to do"
	StatusInprogress Status = "in progress"
	StatusDone       Status = "done"
)

func (e *Status) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Status(s)
	case string:
		*e = Status(s)
	default:
		return fmt.Errorf("unsupported scan type for Status: %T", src)
	}
	return nil
}

type NullStatus struct {
	Status Status `json:"status"`
	Valid  bool   `json:"valid"` // Valid is true if Status is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatus) Scan(value interface{}) error {
	if value == nil {
		ns.Status, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Status.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Status), nil
}

type List struct {
	ID          int64            `json:"id"`
	Title       string           `json:"title"`
	Description pgtype.Text      `json:"description"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}

type Task struct {
	ID           int64            `json:"id"`
	Title        string           `json:"title"`
	Description  pgtype.Text      `json:"description"`
	Status       Status           `json:"status"`
	ParentListID pgtype.Int8      `json:"parent_list_id"`
	ParentTaskID pgtype.Int8      `json:"parent_task_id"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
}
